import { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { AuthProvider } from \"@/hooks/useAuth\";\nimport { sessionManager, logSecurityEvent } from \"@/lib/security\";\nimport Index from \"./pages/Index\";\nimport NotFound from \"./pages/NotFound\";\nimport { useEffect } from \"react\";\n\nconst queryClient = new QueryClient();\n\n// Security monitoring component\nconst SecurityMonitor = ({ children }: { children: React.ReactNode }) => {\n  useEffect(() => {\n    // Log application start\n    logSecurityEvent('APPLICATION_START', {\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n    });\n\n    // Set up session monitoring\n    const sessionInterval = setInterval(() => {\n      if (sessionManager.isSessionExpired()) {\n        logSecurityEvent('SESSION_EXPIRED', {}, 'warning');\n        // Force logout would happen here in production\n      } else if (sessionManager.shouldShowWarning()) {\n        logSecurityEvent('SESSION_WARNING', {}, 'info');\n        // Show session warning modal would happen here\n      }\n    }, 60000); // Check every minute\n\n    // Monitor for suspicious activity\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'visible') {\n        sessionManager.updateActivity();\n      }\n    };\n\n    const handleUserActivity = () => {\n      sessionManager.updateActivity();\n    };\n\n    // Add event listeners for user activity\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    document.addEventListener('mousedown', handleUserActivity);\n    document.addEventListener('keydown', handleUserActivity);\n    document.addEventListener('scroll', handleUserActivity);\n    document.addEventListener('touchstart', handleUserActivity);\n\n    // Cleanup\n    return () => {\n      clearInterval(sessionInterval);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n      document.removeEventListener('mousedown', handleUserActivity);\n      document.removeEventListener('keydown', handleUserActivity);\n      document.removeEventListener('scroll', handleUserActivity);\n      document.removeEventListener('touchstart', handleUserActivity);\n    };\n  }, []);\n\n  return <>{children}</>;\n};\n\nconst App = () => {\n  // Set up global error handling for security\n  useEffect(() => {\n    const handleError = (event: ErrorEvent) => {\n      logSecurityEvent('APPLICATION_ERROR', {\n        error: event.error?.message || 'Unknown error',\n        filename: event.filename,\n        lineno: event.lineno,\n        colno: event.colno,\n      }, 'error');\n    };\n\n    const handleUnhandledRejection = (event: PromiseRejectionEvent) => {\n      logSecurityEvent('UNHANDLED_PROMISE_REJECTION', {\n        reason: event.reason?.toString() || 'Unknown rejection',\n      }, 'error');\n    };\n\n    window.addEventListener('error', handleError);\n    window.addEventListener('unhandledrejection', handleUnhandledRejection);\n\n    return () => {\n      window.removeEventListener('error', handleError);\n      window.removeEventListener('unhandledrejection', handleUnhandledRejection);\n    };\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <SecurityMonitor>\n            <Toaster />\n            <Sonner />\n            <BrowserRouter basename=\"/yccc-nurse-stash\">\n              <Routes>\n                <Route path=\"/\" element={<Index />} />\n                <Route path=\"/verify-email\" element={<Index />} />\n                {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL \"*\" ROUTE */}\n                <Route path=\"*\" element={<NotFound />} />\n              </Routes>\n            </BrowserRouter>\n          </SecurityMonitor>\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n};\n\nexport default App;"